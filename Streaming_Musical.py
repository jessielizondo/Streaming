#!/usr/bin/env python
# coding: utf-8

# # üéµ Streaming musical
# 

# ## üìå Introducci√≥n  
# 
# En este proyecto se analizar√°n datos reales de streaming musical para entender los h√°bitos de escucha de los usuarios en dos ciudades: Springfield y Shelbyville.
# 
# El objetivo es examinar las diferencias en comportamiento seg√∫n el d√≠a de la semana, la hora y el g√©nero musical. Este an√°lisis se estructura en tres etapas: exploraci√≥n, preprocesamiento y an√°lisis.
# El enfoque se centra en tres dimensiones fundamentales:
# 
# - La ciudad del usuario  
# - El momento en que escucha m√∫sica (d√≠a y hora)  
# - El g√©nero musical reproducido  
# 
# Este an√°lisis busca revelar patrones locales de comportamiento, diferencias culturales y oportunidades de personalizaci√≥n para recomendaciones o campa√±as.
# 
# ## üéØ Problema de negocio  
# Comprender **cu√°ndo y qu√©** tipo de m√∫sica escuchan los usuarios seg√∫n su ciudad puede ayudar a:
# 
# - Mejorar algoritmos de recomendaci√≥n musical  
# - Personalizar experiencias por ubicaci√≥n  
# - Planificar estrategias de contenido basadas en el contexto local  
# - Detectar patrones no evidentes para impulsar decisiones comerciales
# 
# ## üîç Objetivos avanzados  
# ‚úî Comparar los h√°bitos de escucha entre Springfield y Shelbyville  
# ‚úî Identificar g√©neros populares por ciudad y d√≠a de la semana  
# ‚úî Detectar horarios pico de consumo musical  
# ‚úî Generar insights accionables para optimizar productos o campa√±as
# 
# ## üìä M√©tricas clave  
# 
# üìå **M√©tricas de comportamiento**  
# - N√∫mero de reproducciones por ciudad  
# - Distribuci√≥n por d√≠a de la semana y por hora  
# - Frecuencia de escucha por usuario  
# 
# üìå **M√©tricas de contenido**  
# - G√©neros m√°s reproducidos por ciudad  
# - Artistas m√°s populares  
# - Comportamientos de escucha por franja horaria  
# 
# üìå **Insights esperados**  
# - Preferencias musicales por ubicaci√≥n  
# - Comportamientos √∫nicos seg√∫n ciudad  
# - D√≠as y horas clave para engagement musical
# 
# ## üóÇ Descripci√≥n del conjunto de datos  
# **Origen:** Dataset simulado de usuarios de streaming musical de Store 1  
# **Resumen:**  
# - ~10,000 registros de eventos de escucha  
# - Columnas clave:  
#   - `userID` ‚Äì ID del usuario  
#   - `Track` ‚Äì Canci√≥n reproducida  
#   - `artist` ‚Äì Nombre del artista  
#   - `genre` ‚Äì G√©nero musical  
#   - `City` ‚Äì Springfield o Shelbyville  
#   - `time` ‚Äì Hora de reproducci√≥n  
#   - `Day` ‚Äì D√≠a de la semana
# 

# ----

# [Volver a Contenidos](#back)

# ## üìå 1. Descripci√≥n de los datos 
# 

# In[1]:


import pandas as pd
df = pd.read_csv('/datasets/music_project_en.csv')
print(df.head(10))
print()
print(df.info())


# ## üîç 2. Observacionnes

# La tabla contiene siete columnas. Almacenan los mismos tipos de datos: `object`.
# 
# Seg√∫n la documentaci√≥n:
# - `' userID'`: identificador del usuario o la usuaria;
# - `'Track'`: t√≠tulo de la canci√≥n;
# - `'artist'`: nombre del artista;
# - `'genre'`: g√©nero de la pista;
# - `'City'`: ciudad del usuario o la usuaria;
# - `'time'`: la hora exacta en la que se reprodujo la canci√≥n;
# - `'Day'`: d√≠a de la semana.
# 
# En las filas tenemos datos sobre las reproducciones por usuario. Las columnas muestran el desgloce de las interacciones de los usuarios, tales como qui√©n es el usuario, qu√© m√∫sica est√° escuchando, y cu√°ndo y d√≥nde ocurre todo.
# 
# A simple vista, parece que los datos son suficientes para probar nuestra hip√≥tesis, ya que las columnas de userID, City, Day y time nos ayudan a identificar las diferencias en la actividad de los usuarios seg√∫n el lugar y el d√≠a. Sin embargo, primero debemos de preprocesar los datos para poder analizarlos correctamente y as√≠ probar nuestra hip√≥tesis.
# 
# El problema encontrado en los datos es que las columnas Track, artist, y genre tienen respectivamente 1343, 7567, y 1198 datos ausentes (null).
# 
# 
# 

# ## üóÇÔ∏è 3. Preprocesamiento de datos 
# 
# 

# In[5]:


df.columns


# In[6]:


# Bucle en los encabezados poniendo todo en min√∫sculas
cols_lowered = []

for col in df.columns:
    cols_lowered.append(col.lower())

print(cols_lowered)    



# In[7]:


# Bucle en los encabezados eliminando los espacios
cols_stripped = []

for col in cols_lowered:
    cols_stripped.append(col.strip())

print(cols_stripped)

# Reemplazar columnas originales por columnas corregidas
df.columns = cols_stripped


# In[8]:


# Cambiar el nombre de la columna "userid"

df.rename(columns = {'userid':'user_id'}, inplace = True)


# In[9]:


# Comprobar el resultado: la lista de encabezados
df.columns


# ### ‚ùó 3.1 Valores ausentes 

# In[10]:


# Calcular el n√∫mero de valores ausentes
df.isna().sum()


# In[11]:


# Bucle en los encabezados reemplazando los valores ausentes con 'unknown'

cols_to_replace = ['track','artist','genre']

for col in cols_to_replace:
    df[col].fillna('unknown', inplace = True)


# In[12]:


# Contar valores ausentes
df.isna().sum()


# [Volver a Contenidos](#back)

# ### üö´ 3.2 Valores Duplicados 

# In[13]:


# Contar duplicados expl√≠citos
df.duplicated().sum()


# In[14]:


# Eliminar duplicados expl√≠citos
df.drop_duplicates(inplace = True)


# In[15]:


# Comprobar de nuevo si hay duplicados
df.duplicated().sum()


# In[16]:


# Inspeccionar los nombres de g√©neros √∫nicos
df['genre'].sort_values().unique()


# In[17]:


# Funci√≥n para reemplazar duplicados impl√≠citos

def replace_wrong_genres(df, column, wrong_genres, correct_genre):
    for wrong_genre in wrong_genres:
        df[column] = df[column].replace(wrong_genre, correct_genre)
    return df



# In[18]:


# Eliminar duplicados impl√≠citos

wrong_genres = ['hip', 'hop', 'hip-hop']

correct_genre = 'hiphop'

data_clean = replace_wrong_genres(df, 'genre', wrong_genres, correct_genre )



# In[19]:


# Comprobaci√≥n de duplicados impl√≠citos
data_clean['genre'].sort_values().unique()


# ### üß™Observaciones 
# Se revisaron y analizaron los valores duplicados, tanto expl√≠citos, como impl√≠citos.
# 
# Primero se utiliz√≥ el m√©todo duplicates() junto con el m√©todo sum() para encontrar el n√∫mero de duplicados expl√≠citos en la tabla.
# En total se encontraron 3826 duplicados, los cuales elimin√© utilizando el m√©todo drop_duplicates().
# Seguido de esto, para comprobar que se hayan borrado, se volvi√≥ a llamar al m√©todo de duplicates() con sum(). Como era esperado, el resultado que arroj√≥ fue de 0.
# 
# Ahora, analizando las columnas, se encontr√≥ que la columna 'genre' deb√≠a de contener duplicados impl√≠citos debido a que el nombre del g√©nero se puede escribir de diferentes maneras. 
# Para encontrar el n√∫mero de duplicados, se mostr√≥ una lista de nombres de g√©nero √∫nicos en orden alfab√©tico para indentificarlos m√°s r√°pido y sencillo. Para esto, se extrajo la columna 'genre' del DataFrame y se llam√≥ al m√©todo sort_values() junto con unique().
# 
# Analizando los datos arrojados, se encontraron los duplicados hip, hop, y hip-hop.
# Para corregir los nombres en la columna, se cre√≥ una funci√≥n con los par√°metros wrong_genres y correct_genre. Dentro de la funci√≥n se utiliz√≥ un bucle for, se extrajo la columna genre y se aplic√≥ el m√©todo replace()
# 
# Por √∫ltimo, se defini√≥ la lista con los valores a reemplazar y el string con el valor a reemplazar y se llam√≥ a la funci√≥n.
# 
# Al final, se volvi√≥ a mostrar la lista de valores √∫nicos de la columna 'genre' para verificar que los valores se hayan reemplazado. Como era de esperarse, ahora s√≥lo hab√≠a un solo nombre para hiphop.

# ## üß† 4. Prueba de hip√≥tesis 

# ### Hip√≥tesis: comparar el comportamiento del usuario o la usuaria en las dos ciudades <a id='activity'></a>

# La hip√≥tesis afirma que existen diferencias en la forma en que los usuarios y las usuarias de Springfield y Shelbyville consumen m√∫sica. Para comprobar esto, usa los datos de tres d√≠as de la semana: lunes, mi√©rcoles y viernes.
# 
# * Agrupa a los usuarios y las usuarias por ciudad.
# * Compara el n√∫mero de canciones que cada grupo reprodujo el lunes, el mi√©rcoles y el viernes.
# 

# El primer paso es evaluar la actividad del usuario en cada ciudad.
# 

# In[20]:


# Contar las canciones reproducidas en cada ciudad
data_clean.groupby('city')['track'].count()


# In[21]:


# Calcular las canciones reproducidas en cada uno de los tres d√≠as
data_clean.groupby('day')['track'].count()


# In[22]:


# Declara la funci√≥n number_tracks() con dos par√°metros: day= y city=.
def number_tracks(data, city, day):

    # Almacena las filas del DataFrame donde el valor en la columna 'day' es igual al par√°metro day=
    data_day = data[data['day'] == day]

    # Filtra las filas donde el valor en la columna 'city' es igual al par√°metro city=
    data_city = data_day[data_day['city'] == city]

    # Extrae la columna 'user_id' de la tabla filtrada y aplica el m√©todo count()
    result = data_city['user_id'].count()

    # Devolve el n√∫mero de valores de la columna 'user_id'
    return result


# In[23]:


# El n√∫mero de canciones reproducidas en Springfield el lunes
number_tracks(data_clean,'Springfield','Monday')


# In[24]:


# El n√∫mero de canciones reproducidas en Shelbyville el lunes
number_tracks(data_clean,'Shelbyville','Monday')


# In[25]:


# El n√∫mero de canciones reproducidas en Springfield el mi√©rcoles
number_tracks(data_clean,'Springfield','Wednesday')


# In[26]:


# El n√∫mero de canciones reproducidas en Shelbyville el mi√©rcoles
number_tracks(data_clean,'Shelbyville','Wednesday')


# In[27]:


# El n√∫mero de canciones reproducidas en Springfield el viernes
number_tracks(data_clean,'Springfield','Friday')


# In[28]:


# El n√∫mero de canciones reproducidas en Shelbyville el viernes
number_tracks(data_clean,'Shelbyville','Friday')


# üìç **Conclusi√≥n**
# 
# La hip√≥tesis es correcta, ya que la actividad de los usuarios, en general, era mayor en Springfield que en Shelbyville. Adem√°s, la actividad era mayor en lunes que en mi√©rcoles, y en viernes que en lunes y mi√©rcoles.

# ## ‚úÖ Conclusiones Finales
# 
# Los g√©neros m√°s populares var√≠an entre Springfield y Shelbyville, lo que sugiere diferencias culturales o demogr√°ficas.
# Se observaron horarios pico de reproducci√≥n distintos entre ciudades, lo cual puede estar influenciado por estilos de vida o h√°bitos laborales.
# Los d√≠as de mayor actividad musical tambi√©n difieren entre ciudades, lo que indica la necesidad de personalizar estrategias por ubicaci√≥n.
# Estos hallazgos permiten a las plataformas de streaming optimizar recomendaciones, campa√±as promocionales y planes de contenido adaptado por regi√≥n.
# 
# Tomando a consideraci√≥n la informaci√≥n que tuvimos disponible para analizar y con base en lo mencionado anteriormente, se puede concluir que la hip√≥tesis se acepta por completo.
# 
# Para un futuro an√°lisis, cabe mencionar que, para que este sea m√°s completo y sin ambig√ºedades, se necesita m√°s informaci√≥n, como por ejemplo la poblaci√≥n de cada ciudad. 
